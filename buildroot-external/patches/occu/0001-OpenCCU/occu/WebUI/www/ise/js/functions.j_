//TODO Check if this file is still necessary - It seems this file is replaced by /www_source/ise/js/functions.js

/**
 * ise/functions.js
 **/

/**
 * @fileOverview Allgemeine Funktionen
 * @author ise, Änderungen durch Falk Werner (eQ-3)
 **/

/* * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * *      Global Constants         * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * */

iseDOM_BuildLabel = "R1.00.0381.0100";
dbg = false;
rfr = true;

ID_ROOMS     = 101;  // Rooms collection ID.
ID_FUNCTIONS = 151;  // Functions collection ID.
ID_FAVORITES = 201;  // Favorites collection ID.
ID_LINKS     = 301;  // Links collection ID.
ID_TRANSFER_PARAMETERS = 1001;
ID_CHANNEL_LIST        = 1002;
ID_NEW_SYSVAR          = 1003;
ID_CREATE_SCRIPT       = 1005; 
ID_EDIT_SCRIPT         = 1006;
ID_CONTROL_TEST        = 1007;
ID_INSERT_VALUE        = 1008;
ID_INSERT_STRING       = 1009;
ID_SET_VALUE_RANGE     = 1010;
ID_DEL_SYS_VARIABLE    = 1011;
ID_SYS_VARS_SELECTION  = 1012;
ID_TIMEMODULE          = 1013;
ID_STATUSINFO          = 1014;
ID_STATUSINFO_WARNING  = 1015;
ID_USER_ACCOUNT_CONFIG_ADMIN = 1016;
ID_USER_ACCOUNT_CONFIG_USER  = 1017;
ID_AUTO_LOGIN_CONFIG     = 1018;
ID_PROGRAM_CHOOSER       = 1019;
ID_EDIT_SYSVAR           = 1021;
ID_CHOOSE_LED            = 1022;
ID_SET_OUCFM_MODE        = 1023;
ID_BIDCOS_INTERFACE = 1024;

nUA = navigator.userAgent;
NAV_IE = false;
NAV_MOZ = false;

if (nUA.toLowerCase().indexOf("msie") > -1) {
  NAV_IE = true;
}
if (nUA.toLowerCase().indexOf("gecko") > -1) {
  NAV_MOZ = true;
}
SCREEN_HEIGHT = 0; // wird in index.htm gesetzt
SCREEN_WIDTH  = 0; // wird in index.htm gesetzt

// Sortier-IDs
SORT_NAME = 1;
SORT_TYPE = 2;
SORT_DESC = 3;
SORT_SN = 4;
SORT_IFACE = 5;
SORT_IMODE = 6;
SORT_FUNC = 7;
SORT_ROOM = 8;

// Sysvar Types
SYSVAR_ALARM = 6;
SYSVAR_BOOL = 2;
SYSVAR_ENUM = 29;
SYSVAR_GENERIC = 0;
SYSVAR_STRING = 11;

// Filter-IDs
FIL_NAME     = 1;
FIL_TYPE     = 2;
FIL_DESC     = 3;
FIL_SN       = 4;
FIL_IFACE    = 5;
FIL_IFACE_S  = 6;
FIL_IFACE_R  = 7;
FIL_MODE     = 8;
FIL_MODE_AES = 9;
FIL_MODE_STD = 10;
FIL_FUNCS    = 11;
FIL_ROOMS    = 12;
FIL_UNIT     = 13;
FIL_CHN      = 14;
FIL_TIME     = 15;
FIL_DATE     = 16;
FIL_USERS    = 17;

TM_ONCE = 8; // ttCalOnce
TM_PERIODIC = 4; // ttCalPeriodic
TM_DAILY = 9; // ttCalDaily
TM_WEEKLY = 5; // ttCalWeekly
TM_MONTHLY = 6; // ttCalMonthly
TM_YEARLY = 7; // ttCalYearly
TM_MON = 1;
TM_TUE = 2;
TM_WED = 4;
TM_THU = 8;
TM_FRI = 16;
TM_SAT = 32;
TM_SUN = 64;
TM_WEEKEND = 96;
TM_WORKDAYS = (TM_FRI * 2) - 1;

CALL_STRCUT = 1;
CALL_SPACECUT = 2;

dlgResult = "";
sPreviousPage = "";
sPreviousPage2 = "";
sPreviousPageArgs = "";
sPreviousPageArgs2 = "";
sActPage = "";
sActPageArgs = "";
sPrevVal = "";
ul = 0;
var wndHelp;
bTxtEditMode = 0;

/*#########################*/
/*# Erweiterte Funktionen #*/
/*#########################*/

setTime = function(time)
{
  if ($("maintime")) { $("maintime").innerHTML = time; }
};

setDate = function(date)
{
  if ($("maindate")) { $("maindate").innerHTML = date; }
};

setAlarmMessageCount = function (count) {

  if ($("msgAlarms")) {
    //$("msgAlarms").innerHTML = "${Alarmmeldungen} (" + count + ")";
    $("msgAlarms").innerHTML = langJSON[getLang()].alarmMsg + " (" + count + ")";

  }
  if (count === 0) {
    if ($("imgAlarms")) {
      $("imgAlarms").src = "/ise/img/dot/green.png";
    }
  }
  else {
    if ($("imgAlarms")) {
      $("imgAlarms").src = "/ise/img/dot/red.png";
    }
  }
};

setServiceMessageCount = function (count) {
  if ($("msgServices")) {
    $("msgServices").innerHTML = langJSON[getLang()].serviceMsg + " (" + count + ")";

  }
  if (count === 0) {
    if ($("imgServices")) {
      $("imgServices").src = "/ise/img/dot/green.png";
    }
  }
  else {
    if ($("imgServices")) {
      $("imgServices").src = "/ise/img/dot/yellow.png";
    }
  }
};



/**
 * Aktualisiert Systemvariablen
 **/
updateSysVar = function(id, value)
{
  var PREFIX = "SYSVAR_";
  var element = $(PREFIX + id);
  
  if (element) 
  {
    element.innerHTML = "";
    element.appendChild(document.createTextNode(value));
  }
};

/**
 * Markiert ein Gerät im Posteingang als fertig bzw. nicht fertig
 **/
setDeviceReadyConfig = function(id, isReady)
{
  var readyButton = $("readyBtn" + id);
  
  if (readyButton)
  {
    readyButton._isReady = isReady; 
  }
};

/**
 * Markiert einen Kanal im Posteingang als ferig bzw. nicht fertig
 **/
setChannelReadyConfig = function(id, isReady)
{
  var readyBox = $("inp" + id);
  
  if (readyBox)
  {
    readyBox.checked  = isReady;
    readyBox._isReady = isReady;
  }
};

/* * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * *   Navigation Functions        * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * */
 
LoadingHTML = function()
{
  var sRet = '<img style="margin: 30px;" src="/ise/img/loading.gif" />';
  return sRet;
};

doClearTempView = true;
bUpdateContentRunning = false;

updateContent = function(file, argsForUrl, codeToExec, bDontSaveUrl)
{
  if( !bUpdateContentRunning )
  {
    bUpdateContentRunning=true;
    iseRefr(false);
    /* <!-- ELV */
    if( !bDontSaveUrl )
    {
      if( sActPage != file )
      {
        conInfo("updateContent: Saving previous page ["+file+"].");
        sPreviousPage2 = sPreviousPage;
        sPreviousPageArgs2 = sPreviousPageArgs;
        sPreviousPage = sActPage;
        sPreviousPageArgs = sActPageArgs;
      }
    }
    sActPage = file;
    sActPageArgs = argsForUrl;
    /* ELV --> */
    if (dbg) { alert(file); }
    $("content").innerHTML = LoadingHTML();
    //sPreviousPage = sActPage;
    //sActPage = file;
    var pb = '';
    if( doClearTempView )
    {
      pb += 'system.SetSessionVar("sessionCTV", "true");';
    }
    else
    {
      pb += 'system.SetSessionVar("sessionCTV", "false");';
    }
    if(codeToExec)
    {
      pb += codeToExec;
    }
    
    iseInitUpdateArrays();
    
    /* <!-- ELV */
    var opts;
    if (file.substring(0, UI_PATH.length) == UI_PATH)
    {
      //method: 'get' ist für die ELV-CGIs notwendig.
      opts = {evalScripts: true, method: 'get', onComplete:function(){iseRefr(true);bUpdateContentRunning=false;translatePage();}};
    }
    else
    {
      opts = {postBody: ReGa.encode(pb),evalScripts: true, onComplete:function(){iseRefr(true);bUpdateContentRunning=false;translatePage();}};
    }
    /* ELV --> */
    
    var url = file + "?sid=" + SessionId;
    if (argsForUrl){ url += argsForUrl; }
    
    //console.info( "updateContent with "+pb );
    
    new Ajax.Updater("content", url, opts);
  }
};

clearUserTempViewIDs2Room = function()
{
  clearUserTempViewIDs2('/pages/tabs/admin/views/rooms.htm');
};

clearUserTempViewIDs2Function = function()
{
  clearUserTempViewIDs2('/pages/tabs/admin/views/functions.htm');
};

clearUserTempViewIDs2 = function(file, args)
{
  // $("content").innerHTML = LoadingHTML();
  sPreviousPage = sActPage;
  sActPage = file;
  var pb = '';
  pb += 'system.SetSessionVar("sessionCTV2", "true");';
  var opts = 
  {
    postBody: ReGa.encode(pb),
    evalScripts: true
  };  
  var url = file + "?sid=" + SessionId;
  if (args){ url += args; }
  // new Ajax.Updater("content", url, opts);
};

reloadSortedPage = function() {
  doClearTempView = false;
  updateContent(sActPage, sActPageArgs, "", true);
};

reloadPage = function() {
  doClearTempView = true;
  updateContent(sActPage, sActPageArgs);
};

loadStartPage = function(fid)
{
  var startPage = "/pages/tabs/startpage.htm";

  //wenn Konfigtool, dann eine andere Startseite anzeigen
  if (PLATFORM != "Central") {startPage = "/configapp/devices.cgi";}

  doClearTempView = true;
  if( typeof(fid) == "undefined" )
  {
    updateContent(startPage);
  }
  else
  {
    updateContent(startPage,"&fid="+fid);
  }
};

loadStartPageGuest = function() {
  doClearTempView = true;
  if( typeof fid == "undefined" )
  {
    updateContent("/pages/tabs/guest/startpageguest.htm");
  }
  else
  {
    updateContent("/pages/tabs/guest/startpageguest.htm","&fid="+fid);
  }
  
};

_loadHandling = function(fid) {
  doClearTempView = true;
  if (typeof fid == "undefined")
    updateContent("/pages/tabs/handling.htm");
  else 
    updateContent("/pages/tabs/handling.htm", "&fid="+fid);
};
  
loadDeviceConfig = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/deviceconfig.htm");
};

loadHelp = function()
{
  wndHelp = null;
  doClearTempView = true;
  updateContent("/config/help.cgi", "&from=internal");
};

loadStatus = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/control.htm");
};

loadAlarmMessages = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/statusviews/alarmMessages.htm");
};

loadServiceMessages = function() {
  var file = "serviceMessages.htm";
  if (PLATFORM != "Central") {file = "serviceMessages.cgi";}
  doClearTempView = true;
  updateContent("/pages/tabs/statusviews/" + file);
};

loadFavorites = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/favorites.htm");
};

loadFavViewer = function(id) {
  doClearTempView = true;
  updateContent("/pages/tabs/favViewer.htm","&id="+id);
};

loadFavOverview = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/user/favOverview.htm");
};

loadNewFav = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/user/newFav.htm");
};

loadLinkProg = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/linkprog.htm");
};

loadSystemConfig = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/systemconfig.htm");
};

loadSystemConfigUser = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/user/systemConfigUser.htm");
};

loadSystemVars = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/systemvars.htm");
};

loadPrograms = function()
{
  doClearTempView = true;
  updateContent("/pages/tabs/admin/views/programs.htm");
};

loadProgramList = function(filter)
{
  doClearTempView = true;
  if( typeof filter == "string" )
  {
    conInfo("loadProgramList: Filter = ["+filter+"]");
    updateContent("/pages/tabs/admin/views/programlist.htm", "", 'system.SetSessionVar("sessionPrgIsFiltered", true);system.SetSessionVar("sessionPrgFilter","'+filter+'");' );
  }
  else
  {
    updateContent("/pages/tabs/admin/views/programlist.htm");
  }
};

loadHandlingRooms = function(roomId)
{
  doClearTempView = true; 
  if (typeof(roomId) == "undefined") { updateContent('/pages/tabs/control/rooms.htm'); }
  else                               { updateContent('/pages/tabs/control/rooms.htm', roomId); }
};

loadHandlingFunctions = function(funcId)
{
  doClearTempView = true; 
  if (typeof(funcId) == "undefined") { updateContent('/pages/tabs/control/functions.htm'); }
  else                               { updateContent('/pages/tabs/control/functions.htm', funcId); }
};

loadHandlingDevices = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/control/devices.htm');
};

loadHandlingPrograms = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/control/programs.htm');
};


loadSysconfigUserAdmin = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/admin/userAdministration.htm');
};

loadSysconfigSysVars = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/admin/systemvars.htm');
};

loadStatusviewSysProtocol = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/control/systemProtocol.htm');
};


loadStatusviewSysVars = function()
{
  doClearTempView = true; 
  updateContent('/pages/tabs/control/sysvars.htm');
};


loadNewDevices = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/views/newdevices.htm");
};

loadRoomList = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/views/rooms.htm");
};

loadFunctionList = function() {
  doClearTempView = true;
  updateContent("/pages/tabs/admin/views/functions.htm");
};

loadSystemControl = function() {
  doClearTempView = true;
  updateContent("/config/control_panel.cgi");
};
  
loadNewLinkPage = function()
{
  updateContent("/config/ic_selchannel.cgi");
};

_setPath = function(path) {
  var s = "<span onclick='WebUI.enter(StartPage);'>Startseite</span>";
  if( (path.length > 0) && $("PagePath") )
  {
    if($("PagePath"))$("PagePath").innerHTML = s + " &gt; " + path;
  }
  else
  {
    if($("PagePath"))$("PagePath").innerHTML = "Startseite";
  }
};

setPath = function (path) {
  var s = "<span onclick='WebUI.enter(StartPage);'>" +langJSON[getLang()].startPage+"</span>";
  if ((path.length > 0) && $("PagePath")) {
    if ($("PagePath"))$("PagePath").innerHTML = s + " &gt; " + path;
  }
  else {
    if ($("PagePath"))$("PagePath").innerHTML = "<span>"+langJSON[getLang()].startPage+"</span>";
  }
  translatePage();
};



logout = function() {
  regaMonitor.stop();
  InterfaceMonitor.stop();
  location.href = "/logout.htm?sid=" + SessionId;
};


/* * * * * * * * * * * * * * * * * * * * * * * * *
 * * * * *     Misc Functions        * * * * * * *
 * * * * * * * * * * * * * * * * * * * * * * * * */

/* Funktion für Popup */
CreatePopup = function(id, type)
{
  dlgPopup = new iseMessageBox(id, type, false);
  PopupClose = function()
  {
    dlgPopup.hide();
  };
  dlgPopup.ShowPopup();
};

buildPropTable= function(id) {
  var opts = {
    evalScripts: true,
    onComplete: function(trans) {
      window.setTimeout(centerMessageBox, 200);
    }
  };
  var url = "/esp/system.htm?sid=" + SessionId + "&action=buildPropTable&id="+id;
  new Ajax.Updater("propTable", url, opts);
};

TestMe = function(id) {
  iseChannel.Test(id);
};

centerMessageBox = function() {
  if ($("messagebox")) {
    var msgbox = $("messagebox");
    var dimMsgBox = msgbox.getDimensions();
    msgbox.style.marginLeft = -(dimMsgBox.width / 2) + 'px';
    msgbox.style.left = '50%';
    msgbox.style.marginTop = -(dimMsgBox.height / 2) + 'px';
  }
};

saveDlgResult = function(id) {
  dlgResult = id; 
};

checkTimeVal = function(val) {
  var sSplit = new Array(2);

  if (val.length != 5) { return false; }
  sSplit = val.split(':');
  if (sSplit.length != 2) { return false; }
  if (isNaN(sSplit[0]))   { return false; }
  if (isNaN(sSplit[1]))   { return false; }

  var iTmp = parseInt(sSplit[0],10);
  if ((iTmp < 0) || (iTmp > 23)) { return false; }
  iTmp = parseInt(sSplit[1],10);
  if ( (iTmp < 0) || (iTmp > 59) ) { return false; }
  
  return true;
};

setFooter = function(s)
{
   $("footer").innerHTML = s;
};

SetFilter = function(id)
{
  return;
/*  
  if ($(id)) {
    var inplist = $(id).getElementsByTagName('input');
    for (var i = 0; i < inplist.length; i++) {
      var tmpId = inplist[i].id.substr(6);
      if (inplist[i].checked === true) 
        filterOptions.addFilter(tmpId);
      else 
        filterOptions.removeFilter(tmpId);
      // TODO: Channel-Liste neu laden (mit Filtern)
    }
  }
*/
};

 // Prüft anhand der filterOptions ob Checkboxen in Submenüs gesetzt werden sollen
selectFilters = function(divToShow) {
 if ($(divToShow)) {
    var inplist = $(divToShow).getElementsByTagName('input');
    for (var i = 0; i < inplist.length; i++) {
      var tmpId = inplist[i].id.substr(6);
      if (filterOptions.isFilterId(tmpId)) 
        inplist[i].checked = true;
      else 
        inplist[i].checked = false;
    }
  }
};

writeDevProg = function(tdParent, chnObj, bClosePopup) {
  var tblSub = Builder.node('table', {width: '100%'});
  var tbodySub = Builder.node('tbody');
  var trSub = Builder.node('tr');
  var tdSub = Builder.node('td');
  var divSub = Builder.node('div', {className: 'StdButton'}, 'Direkte');

  divSub = $(divSub);
  var iTmp = 0;
  if( chnObj['gm'] )
    iTmp = 1;
  divSub.onclick = function() 
  { 
    WebUI.enter(LinkListPage, {
      "iface"  : chnObj['deviface'],
      "channel": chnObj['sn'],
      "keypair": iTmp
    });
    if (bClosePopup) { PopupClose(); }
  };
  tdSub.appendChild(divSub);
  trSub.appendChild(tdSub);
  tbodySub.appendChild(trSub);
  trSub = Builder.node('tr');
  tdSub = Builder.node('td');
  divSub = Builder.node('div', {className: 'StdButton'}, 'Programme');

  divSub.onclick = function() { loadProgramList(chnObj['enumprgfilter']); if(bClosePopup)PopupClose();  };
  tdSub.appendChild(divSub);
  trSub.appendChild(tdSub);
  tbodySub.appendChild(trSub);
  tblSub.appendChild(tbodySub);
  tdParent.appendChild(tblSub);
};

writeTestField = function(td, ids, tm, exist, running)
{
  var cn = "TestButtonDisabled";
  var sDate = '--:--:--';
  var sStyle = "OkButton";
  if( running )
  {
    sStyle = "OkButtonRunning";
  }
  else
  {
    sDate = tm;
    if( exist ) { cn = "TestButton"; }
  }
  var chid = ids.toString().split("\t").join("T");
  var div = Builder.node('div', {id:'TestButtonCH'+chid,className: cn}, 'Test');
  td.appendChild(div);
  if( exist && !running )
  {
    div.onclick = function()
    {
      iseChannels.Test(ids);
      $('TestButtonCH'+chid).className = 'TestButtonDisabled';
      $('OkButtonCH'+chid).className = 'OkButtonRunning';
      $('TestDateCH'+chid).innerHTML = '--:--:--';
    };
  }
  div = Builder.node('div', {id:'OkButtonCH'+chid,className: sStyle}, 'OK');
  td.appendChild(div);
  div = Builder.node('div', {id:'TestDateCH'+chid,className: 'TestDate'}, sDate);
  td.appendChild(div);
};

startUpdateTest = function(chid)
{
  setTimeout( "callbackStartUpdateTest("+chid+")", 5000 );
};

callbackStartUpdateTest = function(chid)
{
  var url = "/esp/system.htm?sid=" + SessionId;
  var pb = "string action = 'TestRunning';";
  pb += 'string id = "' + chid + '";';
  var opts = 
  {
    postBody: ReGa.encode(pb),
    onComplete: function(t) 
    {
      $("TestDateCH"+chid).innerHTML = t.responseText;
      if( t.responseText == "--:--:--" )
      {
        $("OkButtonCH"+chid).className = "OkButton";
      }
      else
      {
        $("OkButtonCH"+chid).className = "OkButtonRunning";
      }
    }
  };  
  new Ajax.Request(url, opts);
};
  
writeDeviceAction = function(tdParent, includeChecks, bIsDev, bDelBtn, obj, bIsGroup) {
  var id = 0;
  if (obj) { id = obj['id']; }
  var tbl = Builder.node('table', {width: '100%', cellpadding: '0'}, [
   Builder.node('colgroup', [
     Builder.node('col', {width: '40%'}),
     Builder.node('col', {width: '60%'})
   ])
  ]);
  var tbody = Builder.node('tbody');
  var tr = Builder.node('tr');
  var tdLeft = Builder.node('td');
  var tdRight = Builder.node('td');

  // buttons Löschen / Einstellen
  var tblSub = Builder.node('table', {width: '100%'});
  var tbodySub = Builder.node('tbody');
  var trSub = Builder.node('tr');
  var tdSub = Builder.node('td');
  var s;
  //var divSub = Builder.node('div', {className: 'StdButton'}, 'Löschen...');

  if (bIsDev && bDelBtn) {
   s = "PrepareDeleteDeviceForm('"+ obj['iface']+"', '"+obj['sn']+"', '"+obj['name']+"', '"+obj['type']+"')";
   var divSub = Builder.node('div', {className: 'StdButton', 
        onclick: s}, 'Löschen');
   tdSub.appendChild(divSub);
   trSub.appendChild(tdSub);
   tbodySub.appendChild(trSub);
  }
  trSub = Builder.node('tr');
  tdSub = Builder.node('td');
  
  s = "";
  if (bIsDev) { s = "WebUI.enter(DeviceConfigPage, {'iface': '" + obj['iface'] + "', 'address': '" + obj['sn'] + "', 'redirect_url':'GO_BACK'});"; }
  else 
  {
    if (bIsGroup) { s = "WebUI.enter(DeviceConfigPage, {'iface': '" + obj['deviface'] + "' ,'address': '" + obj['sn'] + "', 'redirect_url':'GO_BACK', 'with_group': 1});"; }
    else          { s = "WebUI.enter(DeviceConfigPage, {'iface': '" + obj['deviface'] + "' ,'address': '" + obj['sn'] + "', 'redirect_url':'GO_BACK'});"; }
  }
  divSub = Builder.node('div', {className: 'StdButton', onclick: s}, 'Einstellen');

  tdSub.appendChild(divSub);
  trSub.appendChild(tdSub);
  tbodySub.appendChild(trSub);
  
  tblSub.appendChild(tbodySub);
  tdLeft.appendChild(tblSub);

  // checkboxes
  if (includeChecks)
  {
    tblSub = Builder.node('table', {width: '100%'});
    tbodySub = Builder.node('tbody');
    trSub = Builder.node('tr');
    var h = {type: 'checkbox', id: 'ha' + id};
    var sH = "";

    
    if( bIsDev )
    {
      sH = 'iseDevices.setHandling('+id+',id)';
    }
    else
    {
      sH = 'iseChannels.setHandling('+id+',id)';
    }
    switch( obj['handle'] )
    {
      case "YES":
        h = Object.extend(h, {checked: ''});
        break;
      case "READONLY":
        sH = "";
        h = Object.extend(h, {disabled: ''});
        h = Object.extend(h, {readonly: ''});
        break;
      default: break;
    }
    h = Object.extend(h, {onclick: sH});
    tdSub = Builder.node('td', [Builder.node('input', h), 'bedienbar']);
    Element.setStyle(tdSub, {textAlign:"left"});
    trSub.appendChild(tdSub);
    tbodySub.appendChild(trSub);
    trSub = Builder.node('tr');
    var v = {type: 'checkbox', id: 'vi' + id};
    if( obj['vis'] )
    {
      v = Object.extend(v, {checked: ''});
      conInfo("Object "+obj['id']+":"+obj['name']+" is visble");
    }
    else
    {
      conInfo("Object "+obj['id']+":"+obj['name']+" is NOT visble");
    }
    if( bIsDev )
    {
      v = Object.extend(v, {onclick: 'iseDevices.setVisible('+id+',id)'});
    }
    else
    {
      v = Object.extend(v, {onclick: 'iseChannels.setVisible('+id+',id)'});
    }
    tdSub = Builder.node('td', [Builder.node('input', v), 'sichtbar']);
    Element.setStyle(tdSub, {textAlign:"left"});

    trSub.appendChild(tdSub);
    tbodySub.appendChild(trSub);
    trSub = Builder.node('tr');
    var p = {type: 'checkbox', id: 'pr' + id};
    if (obj['proto'])
     p = Object.extend(p, {checked: ''});
    if (bIsDev)
     p = Object.extend(p, {onclick: 'iseDevices.setProto('+id+',id)'});
    else
     p = Object.extend(p , {onclick: 'iseChannels.setProto('+id+',id)'});
    tdSub = Builder.node('td', [Builder.node('nobr', [Builder.node('input', p), 'protokolliert'])]);
    Element.setStyle(tdSub, {textAlign:"left"});
    trSub.appendChild(tdSub);
    tbodySub.appendChild(trSub);
    tblSub.appendChild(tbodySub);
    tdRight.appendChild(tblSub);
  }

  tr.appendChild(tdLeft);
  tr.appendChild(tdRight);
  tbody.appendChild(tr);
  tbl.appendChild(tbody);
  tdParent.appendChild(tbl);
};

spaceCut = function(s) {
  if (s)
  {
    var arTmp = s.split(' ');
    var z = new Array();
    
    for(var i = 0; i < arTmp.length; i++)
    {
      if (arTmp[i] !== "")
      {
        z[z.length] = document.createTextNode(arTmp[i]);
        z[z.length] = document.createElement('br');
      }
    }
    z.pop();
    return z;
  }
  return "";
};

spaceCutHtmlIf = function(s, iCount) {
  if (s)
  {
    var sRet = "";
    var arTmp = s.split(' ');
    var iTmp = 0;
    
    if (arTmp.length > iCount)
    {
      for (var i = 0; i < arTmp.length; i++)
      {
        sRet += arTmp[i] + " ";
        iTmp++;
        if (iTmp == iCount)
        {
          sRet += "<br />";
          iTmp = 0;
        }
      }
      return sRet;
    }
    else { return s; }
  }
  else { return ""; }
};

semCut = function(s) {
  if (s)
  {
    var arTmp = s.split(';');
    var z = new Array();
    for (var i = 0; i < arTmp.length; i++)
    {
      if (arTmp[i] !== "")
      {
        z[z.length] = document.createTextNode(arTmp[i]);
        z[z.length] = document.createElement('br');
      }
    }
    z.pop();
    return z;
  }
  return "";
};

strCut = function(s, bCountOnly, bPlainText) {
  var CUTS = ".:-";
  var MAX_WITHOUT_CUT = 8;
  var bCutChar = false;
  var iSinceLastCut = 0;
  var ret = "";
  var arSplit = new Array();
  var iLastCutPos = 0;
  var i;
  
  if(s)
  {
    for (i = 0; i < s.length; i++) {
      var c = s.charAt(i);
      
      if (!bCountOnly) {
        for (var x = 0; x < CUTS.length; x++) {
          bCutChar = false;
          if (c == CUTS.charAt(x)) {
            arSplit[arSplit.length] = s.slice(iLastCutPos, i+1);
            iLastCutPos = i+1;
            iSinceLastCut = 0;
            break;
          }
        }
      }
    
      iSinceLastCut++;
      if (iSinceLastCut == MAX_WITHOUT_CUT) {
        arSplit[arSplit.length] = s.slice(iLastCutPos, i);
        iLastCutPos = i;
        iSinceLastCut = 0;
      }
    }
    if (iLastCutPos !== 0) { arSplit[arSplit.length] = s.slice(iLastCutPos, i); }
    else                   { arSplit[arSplit.length] = s; }
    
    if (bPlainText) {
      var _s = "";
      for (i = 0; i < arSplit.length; i++) {
        _s += arSplit[i] + "<br />";
      } 
      return _s;
    }
    else {
      var z = new Array();
      for (i = 0; i < arSplit.length; i++) {
        z[z.length] = document.createTextNode(arSplit[i]);
        z[z.length] = document.createElement('br');
      }
      return z;
    }
  }
};

tabToBr = function(s) {
  if (s) {
    var arTmp = s.split('\t');
    var z = new Array();
    for(var i = 0; i < arTmp.length; i++)
    {
      if (arTmp[i] !== "")
      {
        z[z.length] = document.createTextNode(arTmp[i]);
        z[z.length] = document.createElement('br');
      }
    }
    z.pop();
    return z;
  }
  return "";
};

insertBR = function(s) {
  var z = new Array();
  var arSplit = s.split('\t');
  for (var i = 0; i < arSplit.length; i++)
  {
    if (arSplit[i] !== "") 
    {
      z[z.length] = document.createTextNode(arSplit[i]);
      z[z.length] = document.createElement('br');
    }
  }
  if (z.length > 1)
    z.pop();
  return z;
};

show = function(id) {
  if ($(id))
    $(id).show();
};

hide = function(id) {
  if($(id))
    $(id).hide();
};

setProtoIfExist = function(id, bProto) {
  if ($("pr" + id)) {
    $("pr" + id).checked = bProto;
  }  
};

setHandlingIfExist = function(id, bHand) {
  if ($("ha" + id)) {
    $("ha" + id).checked = bHand;
  }  
};

setVisibleIfExist = function(id, bVisi) {
  if ($("vi" + id)) {
    $("vi" + id).checked = bVisi;
  }  
};

/*
textEdit = function(ctrlId, id, allowEmptyString, callback, callStrFunc) 
{
  bTxtEditMode = true;
  var iSize = 8;
  if (screen.availWidth >= 1024) iSize = 12;
  if (!$(ctrlId+"inp"))  
  {
    sPrevVal = $(ctrlId).innerHTML;
    var isEmptyAllowed = false;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      isEmptyAllowed = true;
    }
    var sValue = $(ctrlId).innerHTML;
    while (sValue.indexOf("<br>") > -1){
      sValue = sValue.replace("<br>","");
    }
    while (sValue.indexOf("<BR>") > -1){
      sValue = sValue.replace("<BR>","");
    }
    sValue = sValue.replace(/^\s+/,""); // Left trim
    sValue = sValue.replace(/$\s+/,""); // Left trim         
    sValue = sValue.replace(/<br>/gi, "");
      var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='100' onblur='saveEdit(id, "+id+","+isEmptyAllowed+"," + callback +"," + callStrFunc+")' onkeypress='checkkey(id, "+id+","+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)'/>";
    //var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='100' onblur=\"saveEdit(id, '"+id+"',"+isEmptyAllowed+"," + callback +"," + callStrFunc+")\" onkeypress=\"checkkey(id, '"+id+"',"+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)\"/>";
    s = s+"<input type=hidden id='"+ctrlId+"old' value='"+sValue+"'>";
    // var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' onkeypress='checkkey(id, "+id+","+isEmptyAllowed+"," + callback +", event)'/>";
    $(ctrlId).innerHTML = s;
    $(ctrlId+'inp').focus();
    $(ctrlId+'inp').select();
  }
};
*/

textEdit = function(ctrlId, id, allowEmptyString, callback, callStrFunc) 
{
  bTxtEditMode = true;
  var iSize = 8;
  if (screen.availWidth >= 1024) iSize = 12;
  if (!$(ctrlId+"inp"))  
  {
    sPrevVal = $(ctrlId).innerHTML;
    var isEmptyAllowed = false;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      isEmptyAllowed = true;
    }
    var sValue = $(ctrlId).innerHTML;
    while (sValue.indexOf("<br>") > -1){
      sValue = sValue.replace("<br>","");
    }
    while (sValue.indexOf("<BR>") > -1){
      sValue = sValue.replace("<BR>","");
    }
    sValue = sValue.replace(/^\s+/,""); // Left trim
    sValue = sValue.replace(/$\s+/,""); // Left trim         
    sValue = sValue.replace(/<br>/gi, "");
   // var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='50' onblur='saveEdit(id, "+id+","+isEmptyAllowed+"," + callback +"," + callStrFunc+")' onkeypress='checkkey(id, "+id+","+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)'/>";
    if (PLATFORM == "Central") {
      var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='100' onblur='saveEdit(id, "+id+","+isEmptyAllowed+"," + callback +"," + callStrFunc+")' onkeypress='checkkey(id, "+id+","+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)'/>";
      s = s+"<input type=hidden id='"+ctrlId+"old' value='"+sValue+"'>";
    } else {
      var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' maxlength='100' onblur=\"saveEdit(id, '"+id+"',"+isEmptyAllowed+"," + callback +"," + callStrFunc+")\" onkeypress=\"checkkey(id, '"+id+"',"+isEmptyAllowed+"," + callback + "," + callStrFunc + ", event)\"/>";
      s = s+"<input type=hidden id='"+ctrlId+"old' value='"+sValue+"'>";
    }
    $(ctrlId).innerHTML = s;
    $(ctrlId+'inp').focus();
    $(ctrlId+'inp').select();
  }
};

checkkey = function(ctrlId, id, allowEmptyString, callback, callStrFunc, e) {
  var keycode = 0;
  if (window.event) keycode = window.event.keyCode;
  else if(e) keycode = e.which;
  if (keycode == 13)
    saveEdit(ctrlId, id, allowEmptyString, callback, callStrFunc);
};

checkKeyInfo = function(ctrlId, id, allowEmptyString, e) {
  var keycode = 0;
  if (window.event) keycode = window.event.keyCode;
  else if(e) keycode = e.which;
  if (keycode == 13)
    saveEditInfo(ctrlId, id, allowEmptyString);
};

textEditInfo = function(ctrlId, id, allowEmptyString) 
{
  bTxtEditMode = true;
  var iSize = 8;
  if (screen.availWidth >= 1024) iSize = 12;
  if (!$(ctrlId+"inp"))  
  {
    var isEmptyAllowed = false;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      isEmptyAllowed = true;
    }
    sPrevValInfo = $(ctrlId).innerHTML;
    var sValue = $(ctrlId).innerHTML;
    sValue = sValue.replace(/^\s+/,""); // Left trim    
    sValue = sValue.replace(/$\s+/,""); // Left trim     
    sValue = sValue.replace(/<br>/gi,"");
    sValue = sValue.replace(/&nbsp;/gi,"");
    var s = "<input id='"+ctrlId+"inp' value='"+sValue+"' size='"+iSize+"' onblur='saveEditInfo(id, "+id+","+isEmptyAllowed+")' onkeypress='checkKeyInfo(id, "+id+","+isEmptyAllowed+", event)' />";
    $(ctrlId).innerHTML = s;
    $(ctrlId+'inp').focus();
    $(ctrlId+'inp').select();
  }
};

isPasswordAllowed = function(text,minLen,suppressAlert)
{
  var re = new RegExp( '^[a-zA-Z0-9.=!$():;#*ßüäö-]{'+minLen+',}$', 'i' );
  var bRet = re.test( text );
  var bShowAlert = (typeof(suppressAlert)=="undefined");
  if( !bRet && ( bShowAlert ) ) alert( "Bitte verwenden Sie nur die erlaubten Sonderzeichen [., !, $, (, ), :, ;, #, ß, ä, ö, ü, -]." );
  return bRet;
};

/**
 * Prüft, ob ein Text verbotene Sonderzeichen verwendet.
 * Zu diesen Zeichen gehören: <, >, ', ", &, $, [, ], {, } und \
 * --> Es ist alles erlaubt, was nicht verboten ist
 **/
isTextAllowed = function(text, minLen, suppressAlert)
{
  var forbidden   = /[<>'"&$\[\]\{\}\\]/;
  var isForbidden = forbidden.test( text );
  
  if ((isForbidden) && (typeof(suppressAlert) == "undefined"))
  {
    alert("Bezeichnungen dürfen keines der folgenden Zeichen enthalten: <, >, ', \", &, $, [, ], {, } und \\"); 
  }
  
  return !(isForbidden);
};

/*
isTextAllowed = function(text,minLen,suppressAlert)
{
  var re = new RegExp( '^[a-zA-Z0-9 .=!$&():;#*ßüäö?-]{'+minLen+',}$', 'i' );
  var bRet = re.test( text );
  var bShowAlert = (typeof(suppressAlert)=="undefined");
  if( !bRet && ( bShowAlert ) ) alert( "Bitte verwenden Sie nur die erlaubten Sonderzeichen!" );
  conInfo( "isTextAllowed[minLen="+minLen+"]="+bRet+":["+text+"]" );
  return bRet;
};
*/

if (PLATFORM == "Central")
{  
  saveEdit = function(ctrlId, id, allowEmptyString, callback, callStrFunc)
  {
    // verhindern dass das OnBlur-Event ausgelöst wird wenn mit ENTER bestätigt wurde
    if (!bTxtEditMode) return;
    bTxtEditMode = false;
    var divId = ctrlId.substr(0, ctrlId.length - 3);
    var newVal = $(ctrlId).value;
    var oldV = "";
    if($(divId+"old")){
      oldV = $(divId+"old").value;
      oldV = oldV.replace(/\n/,""); //  trim        
      if (NAV_IE) {
        oldV = oldV.replace(/^\s+|$\s+/,""); // trim
      } else {
        oldV = oldV.replace(/^\s+|\s+$/,""); // trim      
      }
    }
    var minLen = 1;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      minLen = 0;
    }
    if ( isTextAllowed(newVal,minLen) )
    {
      if( id !== 0 )
      {
        if (typeof callback == "function")
        {
          callback(id, newVal);
        }
        iseSystem.saveName(id, newVal, divId, callStrFunc);
        $(divId).innerHTML = newVal;
      }
      else
      {
        if (newVal != oldV){
          iseSystem.checkName( newVal, divId );        
        } else {
          $(divId).innerHTML = sPrevVal;
        }
      }
    }
    else
    {
      $(divId).innerHTML = sPrevVal;
    }
  };
  
  saveEditInfo = function(ctrlId, id, allowEmptyString) 
  {
    // verhindern dass das OnBlur-Event ausgelöst wird wenn mit ENTER bestätigt wurde
    if (!bTxtEditMode) return;
    bTxtEditMode = false;
    var divId = ctrlId.substr(0, ctrlId.length - 3);
    var newVal = $(ctrlId).value;
    var minLen = 1;
    if ((allowEmptyString !== null) && (allowEmptyString === true))
    {
      minLen = 0;
    }
    if ( isTextAllowed(newVal,minLen) )
    {
      $(divId).innerHTML = newVal;
      if( id !== 0 ) { iseSystem.saveDesc(id, newVal); }
    }
    else 
    {
      $(divId).innerHTML = sPrevValInfo;
    }
  };
} 
else 
{
  //Funktionen für das Konfigtool
  saveEdit = function(ctrlId, id, allowEmptyString, callback, callStrFunc)
  {
    // verhindern dass das OnBlur-Event ausgelöst wird wenn mit ENTER bestätigt wurde
    if (!bTxtEditMode) return;
    bTxtEditMode = false;
    var divId = ctrlId.substr(0, ctrlId.length - 3);
    var newVal = $(ctrlId).value;
    var oldV = "";
    if($(divId+"old")){
      oldV = $(divId+"old").value;
      oldV = oldV.replace(/\n/,""); //  trim        
      if (NAV_IE) {
        oldV = oldV.replace(/^\s+|$\s+/,""); // trim
      } else {
        oldV = oldV.replace(/^\s+|\s+$/,""); // trim      
      }
    }
    var minLen = 1;
    if(allowEmptyString != null && allowEmptyString == true)
    {
      minLen = 0;
    }
    if ( isTextAllowed(newVal,minLen) )
    {
      if( id != 0 )
      {
        if (typeof callback == "function")
        {
          callback(id, newVal);
        }else{
          configMetadata.save(id, newVal, divId, callStrFunc);
        }
        $(divId).innerHTML = newVal;
      }
      else
      {
        if (newVal != oldV){
          //iseSystem.checkName( newVal, divId );        
        } else {
          $(divId).innerHTML = sPrevVal;
        }
      }
    }
    else
    {
      $(divId).innerHTML = sPrevVal;
    }
  };
  saveEditInfo = function(ctrlId, id, allowEmptyString) 
  {
    // verhindern dass das OnBlur-Event ausgelöst wird wenn mit ENTER bestätigt wurde
    if (!bTxtEditMode) return;
    bTxtEditMode = false;
    var divId = ctrlId.substr(0, ctrlId.length - 3);
    var newVal = $(ctrlId).value;
    var minLen = 1;
    if(allowEmptyString != null && allowEmptyString == true)
    {
      minLen = 0;
    }
    if ( isTextAllowed(newVal,minLen) )
    {
      $(divId).innerHTML = newVal;
      if( id != 0 ) iseSystem.saveDesc(id, newVal);
    }
    else 
    {
      $(divId).innerHTML = sPrevValInfo;
    }
  };
};


/* * * * * * *  Overlay  * * * * * * * * * * * * * * * * * * * */
showRoomOverlay = function(tdId, chnId) {
  iLastChnId = chnId;
  var tdPos = Position.page($(tdId));
  if (NAV_IE) {
    tdPos[1] -= $("header").getHeight() + $("menubar").getHeight();
  }
  $("roomOverlay").style.top = tdPos[1];
  $("roomOverlay").style.left = tdPos[0];    
  iseChannels.showOverlay(chnId, ID_ROOMS);
};

showFuncOverlay = function(tdId, chnId) {
  iLastChnId = chnId;
  var tdPos = Position.page($(tdId));
  if (NAV_IE) {
    tdPos[1] -= $("header").getHeight() + $("menubar").getHeight();
  }
  $("funcOverlay").style.top = tdPos[1];
  $("funcOverlay").style.left = tdPos[0];    
  iseChannels.showOverlay(chnId, ID_FUNCTIONS);
};

addRoom = function(ctrlId, roomId) {
  iseChannels.chnToRoom(iLastChnId, roomId, $(ctrlId).checked);
};

addFunc = function(ctrlId, funcId) {
  iseChannels.chnToFunc(iLastChnId, funcId, $(ctrlId).checked);
};

convertDomDate = function(s)
{
  var tmp = s;
  var arTmp = tmp.split(' ');
  arTmp = arTmp[0].split('-');
  return arTmp[2]+'.'+arTmp[1]+'.'+arTmp[0];
};

convertDomTime = function(s) {
  if (s.length === 0) { return ""; }
  var tmp = s;
  var arTmp = tmp.split(' ');
  arTmp = arTmp[1].split(':');
  return arTmp[0]+':'+arTmp[1];
};

ExecuteProgram = function(dpid)
{
  var url = "/esp/exec.htm?sid=" + SessionId;
  var pb = "";
  pb += "object o = dom.GetObject( "+dpid+" );";
  pb += "if( o )";
  pb += "{";
  pb += "  o.ProgramExecute();";
  pb += "}";
  var opts = {postBody: ReGa.encode(pb)};
  if(dbg)alert(pb);
  new Ajax.Request(url, opts);
};

setDpState = function(dpid, iState, boolVal)
{
  var url = "/esp/system.htm?sid="+SessionId;
  var pb = "string action = 'setDpState';";
  pb += "integer dpid = "+dpid+";";
  if (boolVal)
  {
    pb += "boolean iState = "+(iState == 1? true : false)+";";
  }
  else
  {
    pb += "integer iState = '"+iState+"';";
  }
  var opts =
  {
    postBody: ReGa.encode(pb)
  };
  if(dbg)alert(pb);
  new Ajax.Request(url, opts);
};

removeDuplicates = function(s1, s2, splitChar, bPlainText) {
  var arTmp = new Array();
  var iAr;
  var bFound;
  var sSC = ' ';
  if (splitChar) { sSC = splitChar; }
  var ar1 = s1.split(sSC);
  var ar2 = s2.split(sSC);
  
  for (var i1 = 0; i1 < ar1.length; i1++) {
    bFound = false;
    for (iAr = 0; iAr < arTmp.length; iAr++) {
      if (ar1[i1] == arTmp[iAr]) {
        bFound = true;
        break;
      }
    }
    if (!bFound) {
      arTmp[arTmp.length] = ar1[i1];
    }
  }
  for (var i2 = 0; i2 < ar2.length; i2++) {
    bFound = false;
    for (iAr = 0; iAr < arTmp.length; iAr++) {
      if (ar2[i2] == arTmp[iAr]) {
        bFound = true;
        break;
      }
    }
    if (!bFound) {
      arTmp[arTmp.length] = ar2[i2];
    }
  }
  
  var i;
  if (bPlainText)
  {
    var sRet = "";
    for(i = 0; i < arTmp.length; i++) {
      if (arTmp[i] !== "") {
        sRet += arTmp[i] + "<br>";
      }
    }
    sRet = sRet.substr(0, sRet.length - 4);
    return sRet;
  }
  else {
    var z = new Array();
    for(i = 0; i < arTmp.length; i++) {
      if (arTmp[i] !== "") {
        z[z.length] = document.createTextNode(arTmp[i]);
        z[z.length] = document.createElement('br');
      }
    }
    z.pop();
    return z;
  }
};

lastSort = "";
lastDir = 0;

lastSort2 = "";
lastDir2 = 0;

iseSetLastSort = function(sort)
{
  lastSort = sort;
};

iseClearLastSort = function()
{
  lastSort = "";
  iseResetDirection();
  iseClearLastSort2();
};

iseClearLastSort2 = function()
{
  lastSort2 = "";
  iseResetDirection2();
};

iseChangeDirection = function()
{
  if( lastDir == 1 )
  {
    lastDir = 0;
  }
  else
  {
    lastDir = 1;
  }
};

iseChangeDirection2 = function()
{
  if( lastDir2 == 1 )
  {
    lastDir2 = 0;
  }
  else
  {
    lastDir2 = 1;
  }
};

iseResetDirection = function()
{
  lastDir = 0;
};

iseResetDirection2 = function()
{
  lastDir2 = 0;
};

iseArraySwap = function(arr,entryA,entryB)
{
  var tmp = arr[entryA];
  arr[entryA] = arr[entryB];
  arr[entryB] = tmp;
  return arr;
};

iseSortMultiArray = function(arr,dsc,dir,sln, sessionVar,popup)
{
  conInfo("Sort multi array.");
  do
  {
    var n = arr.length - 1;
    var bSwapped = false;
    for(var i=0;i<n;i++)
    {
      if( typeof arr[i][dsc] == "undefined" )
      {
        arr[i][dsc] = "";
      }
      if( typeof arr[i+1][dsc] == "undefined" )
      {
        arr[i+1][dsc] = "";
      }      
      var item = arr[i][dsc].toLowerCase();
      item = item.replace("ö", "o");
      item = item.replace("ä", "a");
      item = item.replace("ü", "u");
      item = item.replace("ß", "ss");
      var nextitem = arr[i+1][dsc].toLowerCase();
      nextitem = nextitem.replace("ö", "o");
      nextitem = nextitem.replace("ä", "a");
      nextitem = nextitem.replace("ü", "u");
      nextitem = nextitem.replace("ß", "ss");
      if( dir === 0 )
      {
        if( item > nextitem )
        {
          iseArraySwap(arr,i,i+1);
          bSwapped = true;
        }
      }
      else
      {
        if( item < nextitem )
        {
          iseArraySwap(arr,i,i+1);
          bSwapped = true;
        }
      }
    }
  } while( bSwapped );
    
  if (!popup) iseTransferSortedArray(arr,dsc,sln, sessionVar);
  
};

iseTransferSortedArray = function(arr,dsc,sortListNumber, sessionVar)
{
  conInfo("Transferring sorted array.");
  var url = "/esp/system.htm?sid="+SessionId;
  var pb = "";
  pb += 'string action = "AddToTempView'+sortListNumber+'";';
  
  var s = "sessionLS";
  if (typeof(sessionVar) != 'undefined') s = sessionVar;
  pb += 'system.SetSessionVar("'+s+'", "'+dsc+'");';
  pb += 'string ids = "';
  for(var i=0;i<arr.length;i++)
  {
    pb += arr[i]["id"];
    if( i != (arr.length-1) )
    {
      pb += "\t";
    }
  }
  pb += '";';
  if(dbg)alert(pb);
  var opts = 
  {
    postBody: ReGa.encode(pb),
    onComplete: function(t)
    {
      if(dbg){alert(t.responseText);}
      if(rsp){conInfo("RELOAD SORTED PAGE");reloadSortedPage();}
      if(gac){conInfo("GET ALL CHANNELS"); if (typeof GetAllChannels() == "function") {GetAllChannels();}}
      isSorting = false;
    }
  };
  new Ajax.Request(url,opts); 

};

iseRemoveSpecialCharacters = function(s, bBrToSpace)
{
  var newVal;
  
  // replace all whitespaces (\f, \n, \t, \v) 
  if( bBrToSpace ) { newVal = s.replace(/\s/g, " "); }
  else             { newVal = s.replace(/\s/g, ""); }
  return newVal;
};

iseStripAll = function(s)
{
  var retVal = s;
  retVal = retVal.replace(/\r/g, "");
  retVal = retVal.replace(/\n/g, "");
  retVal = retVal.replace(/\t/g, "");
  return retVal;
};

rsp = true;
gac = false;
isSorting = false;

IseSort = function(array, colName, reload, popup)
{
  conInfo("Start IseSort");
  if (!isSorting)
  {
    isSorting = true;
    Cursor.set(Cursor.WAIT);
    gac = false;
    rsp = reload;
    conInfo( "IseSort: SET RSP = "+rsp );
    if( lastSort == colName ) { iseChangeDirection(); } else { iseResetDirection(); }
    if (popup) 
    {
      iseSortMultiArray(array,colName,lastDir,1,this.popup);
    }
    else
    {
      iseSortMultiArray(array,colName,lastDir,1);
    }
    lastSort = colName;
  }
};

IseSort2 = function(array, colName, reload, gacCall,utvNo, sessionVar)
{
  conInfo("Start IseSort2");
  if (!isSorting)
  { 
    isSorting = true;
    Cursor.set(Cursor.WAIT);
    if(typeof utvNo == "undefined")
    {
      utvNo = 2;
    }
    gac = gacCall;
    rsp = reload;
    conInfo( "IseSort2: SET RSP = "+rsp );
    if( lastSort2 == colName ) { iseChangeDirection2(); } else { iseResetDirection2(); }
    iseSortMultiArray(array,colName,lastDir2,utvNo, sessionVar);
    lastSort2 = colName;
  }
};

iseUpdateIDArray = new Array();
iseUpdateTMArray = new Array();

iseInitUpdateArrays = function()
{
  iseUpdateIDArray = new Array();
  iseUpdateTMArray = new Array();
};

updateChannelControl = function( chnId, lastTimestamp )
{
  conInfo("updateChannelControl");
  if(dbg)alert("new update dp "+chnId);
  //if(rfr)setTimeout( "callbackUpdateChannelControl(" + chnId + ",'" + lastTimestamp + "')", 10000 );
  var iPos = iseUpdateIDArray.indexOf(chnId);
  if( iPos > -1 )
  {
    iseUpdateTMArray[iPos] = lastTimestamp;
  }
  else
  {
    iseUpdateIDArray.push( chnId );
    iseUpdateTMArray.push( lastTimestamp );
  }
};

callbackUpdateChannelControl = function( chnId, lastTimestamp )
{
  conInfo("callbackUpdateChannelControl");
  var url = "/esp/system.htm?sid=" + SessionId;
  var pb = "string action = 'getLastTimeOfChn';";
  pb += 'string chnId = "' + chnId + '";';
  var opts = 
  {
    postBody: Rega.encode(pb),
    onComplete: function(t) 
    {
      var sResp = t.responseText;
      // CR or LF may be appended which must be ignored
      if( sResp.length > lastTimestamp.length )
      {
        sResp = sResp.substr( 0, lastTimestamp.length );
      }
      if( sResp != lastTimestamp )
      {
        reloadPage();
      }
      else
      {
        updateChannelControl( chnId, lastTimestamp );
      }
    }
  };  
  
  new Ajax.Request(url, opts);
};

changeTransMode = function(chnId, ctrlId) {
  dlgPopup = new iseMessageBox(ID_TRANSFER_PARAMETERS, chnId);
  PopupClose = function(selIdx)
  {
    dlgPopup.hide();
    if (selIdx === 0) {
      $(ctrlId).innerHTML = "Standard";
    }
    else {
      $(ctrlId).innerHTML = "Gesichert";
    }
  };
  if (PLATFORM != 'Central') {
    SendRequest('/popupTransEditor.cgi');
  }
  dlgPopup.ShowPopup();
};

recreateControl = function(chnId,sTimeStamp)
{
  var url;
  var pb;
  var opts;
  
  //alert("recreating control "+chnId+" at "+sTimeStamp);
  conInfo("recreateControl");
  if( $("tmc"+chnId) )
  {
    if( typeof sTimeStamp == "undefined" )
    {
      url = "/esp/system.htm?sid="+SessionId;
      pb = "string action = 'getLastTimeOfChn';";
      pb += "integer cId = "+chnId+";";
      opts =
      {
        postBody: ReGa.encode(pb)
      };
      new Ajax.Updater("tmc"+chnId, url, opts);
    }
    else
    {
      $("tmc"+chnId).innerHTML = sTimeStamp;
    }
  }
  
  if( $("dpc" + chnId) )
  {
    var iStatusOnly = 0;
    if (sActPage.indexOf("statusviews") > -1) 
    {
      iStatusOnly = 1;    
    }
    url = "/esp/datapointconfigurator.htm?sid="+SessionId;
    pb = "string action = 'dcCreate';";
    pb += "integer cId = "+chnId+";";
    pb += "integer iStatusOnly = " + iStatusOnly + ";";
    opts =
    {
      postBody: ReGa.encode(pb),
      evalScripts: true,
      onComplete: function(t)
      {
        //alert(t.responseText);
      }
    };
    //alert(pb);
    new Ajax.Updater("dpc"+chnId, url, opts);
  }
};

LogoClick = function()
{
  //alert( iseUpdateIDArray.join("_") );
  //alert( iseUpdateTMArray.join("_") );
  //loadLinkList();
};

updateGroupCell = function(prefix, chnId1, chnId2, content) {
  var sCellId = prefix + chnId1 + chnId2;
  if ($(sCellId)) 
    $(sCellId).innerHTML = content;
  else {
    sCellId = prefix + chnId2 + chnId1;
    if ($(sCellId))
      $(sCellId).innerHTML = content;
  }
};

pause = function(ms)
{
  var currentTime = new Date();
  var exitTime = currentTime.getTime() + ms;
  while( true )
  {
    currentTime = new Date();
    if( currentTime.getTime() > exitTime ) return;
  }
};

iseFlasher = null;

StartFlashing = function()
{
  iseFlasher = new PeriodicalExecuter(
    function(pe)
    {
      if( $("headerLogo") )
      {
        if( $("headerLogo").src.indexOf("_red") >= 0 )
        {
          $("headerLogo").src = "/ise/img/rm-logo_small.png";
        }
        else
        {
          $("headerLogo").src = "/ise/img/rm-logo_small_red.png";
        }
      }
    },
    1);
};

StopFlashing = function()
{
  iseFlasher.stop();
  iseFlasher = null;
};

SwitchOnFlashLight = function()
{
  if ($("headerLogo")) { $("headerLogo").src = "/ise/img/rm-logo_small_red.png"; }
};

SwitchOffFlashLight = function()
{
  if ($("headerLogo")) { $("headerLogo").src = "/ise/img/rm-logo_small.png"; }
};

ShowAjaxLoad = function()
{
  if ($("ajaxload"))
    $("ajaxload").show();
};

HideAjaxLoad = function()
{
  if ($("ajaxload"))
    $("ajaxload").hide();
};

buildObj = function(id, trId, ctrlId, name, rooms, funcs, roomIDs, funcIDs) {
  var tmp = new Object();
  tmp['id'] = id;
  tmp['trid'] = trId;
  tmp['ctrlId'] = ctrlId;
  tmp['name'] = name;
  tmp['room'] = rooms;
  tmp['func'] = funcs;
  tmp['fltOpts'] = new Object();
  tmp['fltOpts']['rooms'] = roomIDs;
  tmp['fltOpts']['funcs'] = funcIDs;
  return tmp;
};

RemoveAllRowsFromTable = function(table)
{
  if( $(table) )
  {
    while($(table).rows.length )
    {
      $(table).deleteRow(0);
    }
  }
};

array_merge = function(one,two)
{
  one.push(two);
  return one.flatten();
};

DeleteObject = function(id)
{
  var url = "/esp/system.htm?sid="+SessionId;
  var pb = "";
  pb += 'string action = "DeleteObject";';
  pb += 'string id = "'+id+'";';
  var opts = 
  {
    postBody: ReGa.encode(pb),
    onSuccess: function(t) 
    {
      if( t.responseText == "false" )
      {
        if(dbg){alert("Objekt konnte nicht gelöscht werden.");}
      }
      reloadPage();
    }
  };
  new Ajax.Request(url, opts);
};

DeleteObject2 = function(id)
{
  var url = "/esp/system.htm?sid="+SessionId;
  var pb = "";
  pb += 'string action = "DeleteObject";';
  pb += 'string id = "'+id+'";';
  var opts = { 
    postBody: ReGa.encode(pb), 
    onSuccess: function(t) 
    { 
      if( t.responseText == "false" )
      {
        if(dbg){alert("Objekt konnte nicht gelöscht werden.");}
      }
      dlgPopup.load(); 
    }
  };
  new Ajax.Request(url, opts);
};

iseRefr = function(state)
{
  //rfr = state;
};

conInfo = function(msg)
{
  if( typeof console != "undefined" )
  {
    console.info(msg);
  }
};

conError = function(msg)
{
  if( typeof console != "undefined" )
  {
    console.error(msg);
  }
};

ResetGAC = function()
{
  conInfo("ResetGAC called.");
  GetAllChannels = function()
  {
    conInfo("GetAllChannels: NOP");
  };
};

addLeadingZero = function( iValue )
{
  var sRet = ""+iValue;
  if( iValue < 10 )
  {
    sRet = "0"+iValue;
  }
  return sRet;
};

round = function(x, n) 
{ 
  // x = Fließkommazahl, n = gewünschte Nachkommastellen
  if (!n) n = 2; //wenn n fehlt wird n = 2
  if (n < 1 || n > 14) return false;
  var e = Math.pow(10, n);
  var k = (Math.round(x * e) / e).toString();
  if (k.indexOf('.') == -1) k += '.';
  k += e.toString().substring(1);
  return k.substring(0, k.indexOf('.') + n+1);
};

/**
 * Entfernt einen Kanal aus einem Raum.
 **/
removeChannelFromRoom = function(roomId, channelId)
{
  decChnCount(roomId);
  iseChannels.delChnFromID(channelId, roomId, true);
  clearUserTempViewIDs2Room();
  
  var room = RoomList.get(roomId);
  if (room)
  {
    room.removeChannel(channelId);
  }
};

/**
 * Entfernt einen Kanal aus allen Räumen.
 **/
removeChannelFromAllRooms = function(roomId, channelId)
{
  decChnCount(roomId);
  iseChannels.delChnFromAllRooms(channelId, true);
  clearUserTempViewIDs2Room();
  
  RoomList.list().each(function (room) {
    room.removeChannel(channelId);
  });
};

removeChannelFromSubsection = function(subsectionId, channelId)
{
  decChnCount(subsectionId);
  iseChannels.delChnFromID(channelId, subsectionId, true);
  clearUserTempViewIDs2Function();
  
  var subsection = SubsectionList.get(subsectionId);
  if (subsection)
  {
    subsection.removeChannel(channelId);
  }
};

removeChannelFromAllSubsections = function(subsectionId, channelId)
{
  decChnCount(subsectionId);
  iseChannels.delChnFromAllFunctions(channelId, true);
  clearUserTempViewIDs2Function();
  
  SubsectionList.list().each(function (subsection) {
    subsection.removeChannel(channelId);
  });
};

removeRoomOrSubsection = function(id)
{
  var room = RoomList.get(id);
  if (room) { RoomList.remove(room); }
  
  var subsection = SubsectionList.get(id);
  if (subsection) { SubsectionList.remove(subsection); }
  
};

changeRoomOrSubsection = function(id)
{
  var room = RoomList.get(id);
  if (room) { RoomList.beginUpdate(id); }
  
  var subsection = SubsectionList.get(id);
  if (subsection) { SubsectionList.beginUpdate(id); }
};

